[
["index.html", "R 프로그래밍과 데이터 분석 Chapter 1 Introduction 강의 개요 1.1 Goal 강의 목표 1.2 This course 1.3 Tips 1.4 References books 참고 교제 1.5 References 참고 자료 1.6 Evaluation 평가 세부 항목 1.7 Schedule 강의 계획", " R 프로그래밍과 데이터 분석 한국생명공학연구원 김하성 2020-03-25 Chapter 1 Introduction 강의 개요 장소: 한국생명공학연구원 연구동 세미나실 1213호 (매주수요일 13:00~16:00) 강사: 한국생명공학연구원 바이오합성연구센터 김하성 연락처: 042-860-4372, haseong@kribb.re.kr (생명연 연구동 1143) 강의site: https://greendaygh.github.io/Rstat2020/ 1.1 Goal 강의 목표 이공계열 대학원생의 원활한 실험 설계와 데이터 분석을 위한 범용 프로그램 언어인 R의 사용법과 프로그래밍 기술의 습득이 목표. 특히 Data scientist를 위해 개발된 tidyverse와 ggplot2 패키지 사용법을 위주로 강의와 실습을 진행하며 후반부 대규모 서열 데이터를 이용한 실습을 통해 R의 활용 기술을 학습함 1.2 This course R 사용에 대한 기본 개념과 프로그래밍을 중심으로 필요시 기초 통계지식 강의 실습 데이터로는 교제에서 제공되는 예제 데이터와 생물학 서열 등 대규모 데이터를 사용한 분석 진행 모든 강의 시간 실습을 위한 개인 노트북 지참 필수 강의 자료는 강의 웹사이트에 수업 전 업데이트됨 상황에 따라 강의 일정이 조정될 수 있음 과제물은 필요에 따라 수업 후 제공되며 다음 수업 전까지 메일로 제출 1.3 Tips 눈으로 이해하지 않고 스스로 실습 필수 각 명령줄이 어떻게/왜 작동하는지 이해하기 인터넷 검색을 통한 다른사람의 코드를 적극적으로 이해하고 적용 필요 1.4 References books 참고 교제 Using R for Introductory Statistics by John Verzani Free version of 1st Edition https://cran.r-project.org/doc/contrib/Verzani-SimpleR.pdf http://cbb.sjtu.edu.cn/~mywu/bi217/usingR.pdf Second edition https://www.crcpress.com/Using-R-for-Introductory-Statistics-Second-Edition/Verzani/p/book/9781466590731 R for Data Science (https://r4ds.had.co.nz, https://github.com/hadley) Bioinformatics Data Skills by Vince Buffalo (http://2.droppdf.com/files/5aTvl/bioinformatics-data-skills.pdf) First Course in Statistical Programming with R by Braun and Murdoch (https://www.cambridge.org/core/books/first-course-in-statistical-programming-with-r/C9F088122AB40517B07FA77F2F0FDE2F) Introductory Statistics with R by Dalgaard (http://www.academia.dk/BiologiskAntropologi/Epidemiologi/PDF/Introductory_Statistics_with_R__2nd_ed.pdf) Modern Applied Statistics with S by Venables and Ripley (http://www.bagualu.net/wordpress/wp-content/uploads/2015/10/Modern_Applied_Statistics_With_S.pdf) 일반통계학 (영지문화사, 김우철 외) 1.5 References 참고 자료 https://resources.rstudio.com/ http://shiny.rstudio.com/tutorial/ R 홈페이지 https://www.r-project.org/ Rstudio 홈페이지 https://www.rstudio.com/ Packages for biologists https://www.bioconductor.org/ R 기본 문서들 (소개, 사용, 설치, 운영) https://cran.r-project.org/manuals.html R ebooks https://bookdown.org/ Cheat Sheets https://www.rstudio.com/resources/cheatsheets/ 1.6 Evaluation 평가 세부 항목 출석 50% / 과제 50% / 80점 이상 S, 80점 미만 U 부여 1.7 Schedule 강의 계획 1주차 - Introduction and installation of R/Rstudio 2주차 - R language basics I – Interface, operations, packages, help, NULL, NA, and NaN 3주차 - R language basics II - data type and structure 4주차 - R language basics III – if, for, while 5주차 - R programming – Maze Robot (function, matrix) I 6주차 - R programming – Maze Robot (function, matrix) II 7주차 - Data manipulation I - read, write, rbind, cbind, split, subset 8주차 - Data manipulation II - dplyr, apply, reshape 9주차 - Visualizing data in R I – plot, hist 10주차 - Visualizing data in R II – ggplot2 11주차 - Visualizing data in R III – ggplot2 12주차 - Shiny for interactive applications in R I 13주차 - Shiny for interactive applications in R II 14주차 - Data analysis #1 15주차 - Data analysis #2 16주차 - Data analysis #3 "],
["r-basics.html", "Chapter 2 R basics 2.1 What is R / Rstudio 2.2 R / Rstudio installation 2.3 Rstudio interface 2.4 Keyboard shortcuts 2.5 Set working directory 2.6 Hello world 2.7 Help 2.8 RStudio workspace 2.9 R packages 2.10 Data sets 2.11 Cheatsheet", " Chapter 2 R basics 2.1 What is R / Rstudio R은 통계나 생물통계, 유전학을 연구하는 사람들 사이에서 널리 사용되는 오픈소스 프로그래밍 언어 입니다. Bell Lab에서 개발한 S 언어에서 유래했으며 엄청나게 많은 라이브러리 (다른 사람들이 만들어 놓은 코드)가 있어서 쉽게 가져다 사용할 수 있습니다. R은 복잡한 수식이나 통계 알고리즘을 간단히 구현하고 사용할 수 있으며 C, C++, Python 등 다른 언어들과의 병행 사용도 가능합니다. 2019년 top five language에 랭크 되었으며 이는 빅데이터 증가에 따라 인기가 높아진 것으로 볼 수 있습니다 (참고로 2018년에는 7위). Despite being a much more specialized language than the others, it’s maintained its popularity in recent years due to the world being awash in an ever-growing pile of big data. https://spectrum.ieee.org/computing/software/the-top-programming-languages-2019 R은 데이터를 통계분석에 널리 사용되는데 이는 데이터를 눈으로 확인하기 위한 visualization 이나 벡터 연산 등의 강력한 기능 때문에 점점 더 많은 사람들이 사용하고 있습니다. 기존에는 속도나 확장성이 다른 언어들에 비해 단점으로 지적되었으나 R 언어의 계속적인 개발과 업데이트로 이러한 단점들이 빠르게 보완되고 있습니다. R 사용을 위해서는 R 언어의 코어 프로그램을 먼저 설치하고 그 다음 R 언어용 IDE인 RStudio 설치가 필요합니다. 2.2 R / Rstudio installation R 사이트에 접속 후 (https://www.r-project.org/) 좌측 메뉴 상단에 위치한 CRAN 클릭. 미러 사이트 목록에서 Korea의 아무 사이트나 들어감 Download R for Windows를 클릭 후 base 링크 들어가서 Download R 3.6.3 for Windows 링크로 실행 프로그램 다운로드 (2020.3 현재 R 버전은 3.6.3). 로컬 컴퓨터에 Download 된 R-3.6.3-win.exe 를 실행하고 설치 프로그램의 지시에 따라 R 언어 소프트웨어 설치를 완료합니다. Rstudio는 R 언어를 위한 오픈소스 기반 통합개발환경(IDE)으로 R 프로그래밍을 위한 편리한 기능들을 제공해 줍니다. 다음 사이트에 접속 (https://www.rstudio.com/), 상단의 Products &gt; RStudio 클릭 RStudio Desktop 선택 Download RStudio Desktop 클릭 RStudio Desktop Free 버전의 Download를 선택하고 Download RStudio for Windows (2020.03현재 version 1.2.5033) 클릭, 다운로드. 로컬 컴퓨터에 다운로드된 RStudio-1.2.5033.exe를 실행하고 설치 가이드에 따라 설치 완료합니다. 2.3 Rstudio interface 아래 그림의 좌측 상단의 공간은 코드편집창, 좌측 하단은 콘솔창 입니다. 2.4 Keyboard shortcuts 참고사이트 https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts Tools –&gt; Keyboard shortcut Quick Reference (Alt + Shift + K) 코드편집창 이동 (Ctrl+1) 콘솔창 이동(Ctrl+2) 한 줄 실행 (Ctrl+Enter) 주석처리 (Ctrl + Shift + C) 또는 #으로 시작하는 라인 실습 코드편집창에서 다음 입력 단축키 Ctrl + enter로 코드 실행 단축키 Ctrl + 2로 커서 콘솔창으로 이동 x값 x+y값 확인 단축키 Ctrl + 1로 코드편집창 이동 단축키 Ctrl + Shift + C 사용 # x &lt;- 10 # y &lt;- 20 2.5 Set working directory 시작 전 항상 작업 디렉토리 설정. 예를 들어 c: 아래 새로운 디렉토리 rprog2020 을 만들고 작업공간으로 설정 getwd() dir() setwd(&quot;C:\\\\rprog2020&quot;) getwd() dir() 또는 아래와 같이 RStudio 메뉴 에서 설정 2.6 Hello world mystring &lt;- &quot;Hello \\n world!&quot; cat(mystring) print(mystring) 2.7 Help R의 장점 중 하나로 방대한 양의 도움말 페이지가 제공됩니다. ? 명령을 사용하면 되며 구글이나 웹에서도 도움을 얻을 수 있습니다. ?cat ?print ?mean help(&quot;mean&quot;) example(&quot;mean&quot;) help.search(&quot;mean&quot;) help(package=&quot;MASS&quot;) 2.8 RStudio workspace 2.9 R packages R은 “package”라 불리우는 다양한 함수 라이브러리를 사용할 수 있습니다. 예를 들어 sum() 이나 sd()와 같은 함수는 stats이라는 패키지에서 구현된 함수 입니다. 이러한 패키지는 인터넷의 repository에서 구할 수 있으며 대표적으로 The Comprehensive R Archive Network (CRAN) http://cran.r-project.org/web/views/ 와 생물학자를 위한 Bioconductor specialised in genomics http://www.bioconductor.org/packages/release/BiocViews.html#___Software 가 있습니다. 이러한 패키지의 설치는 아래와 같이 RStudio를 이용하거나 콘솔창에서 install.packages() 함수를 이용할 수 있습니다. UsingR package installation 패키지를 설치하고 사용하기 위해서는 library() 함수를 사용해서 미리 loading 해 두어야 합니다. 한 번 로딩으로 작업 세션이 끝날때까지 관련된 함수를 사용할 수 있으나 R 세션이나 RStudio를 재시작 할 경우 다시 로딩해야 사용할 수 있습니다. library(UsingR) R 설치 디렉토리 R 패키지 설치 디렉토리 .libPaths() path.package() 2.10 Data sets 대부분의 패키지는 함수와 함께 관련된 도움말, 예제, 그리고 데이터셋을 같이 제공해 줍니다. library() 함수를 사용할 때 자동으로 같이 로딩이 되며 data() 함수를 사용해서 사용자 작업공간에 복사본을 만들어서 사용할 수 있습니다. head(rivers) length(rivers) class(rivers) data(rivers) data(package=&quot;UsingR&quot;) library(HistData) head(Cavendish) str(Cavendish) head(Cavendish$density2) data(package=&quot;HistData&quot;) 2.11 Cheatsheet 이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다. "],
["r-programming-basics-i.html", "Chapter 3 R programming basics I 3.1 Terminology 3.2 R console script 3.3 What is a programming language 3.4 Variables and values 3.5 Variable type of (storage) mode 3.6 Variable - Vectors 3.7 Variable - matrix 3.8 Variable - data.frame 3.9 Variable - list 3.10 Missing values 3.11 Some useful functions", " Chapter 3 R programming basics I 3.1 Terminology Session: R 언어 실행 환경 Console: 명령어 입력하는 창 Code: R 프로그래밍 변수/제어문 모음 Objects (개체, variable): 데이터(값, value)가 저장되는 장소 Object (variable) types: Vectors: 값들의 모임 combine function c() EX: c(6, 11, 13, 31, 90, 92) Factors: 범주형 데이터 저장 장소 Data frames: 2D matrix 형태 데이터 자장 장소 Data (value) types: Integers, doubles/numerics, logicals, and characters. Conditionals (조건, 제어): if, ==, &amp; (AND), | (OR) Ex: (2 + 1 == 3) &amp; (2 + 1 == 4) for, while: 반복 수 Functions (함수, commands): 특정 일 수행, 함수이름 - 입력값 (arguments) - 출력값 (output) 으로 구성 3.2 R console script 콘솔에서 바로 계산을 수행할 수 있습니다. 참고로 이전에 수행한 명령은 콘솔에 커서가 있는 상태에서 위 아래 화살표를 누르면 볼 수 있고 엔터를 눌러 재사용 할 수 있습니다. ;을 사용하면 두 개의 명령을 동시에 수행할 수 있습니다. \\[ 2 + 2 \\] \\[ ((2 - 1)^2 + (1 - 3)^2)^{1/2} \\] 2 + 2 ((2 – 1)^2 + (1 – 3)^2 )^(1/2) 2 + 2; 2 - 2 3.3 What is a programming language 3.4 Variables and values R is a programming language Assignment operator ( &lt;- OR = ) Valid object name &lt;- value 단축키: Alt + - (the minus sign) 내장 변수 Built-in variables x &lt;- 2 y &lt;- x^2 – 2*x + 1 y x &lt;- &quot;two&quot; some_data &lt;- 9.8 pi 변수이름 작명법 Characters (letters), numbers, “_”, “.” A and a are different symbols Names are effectively unlimited in length i_use_snake_case &lt;- 1 otherPeopleUseCamelCase &lt;- 2 some.people.use.periods &lt;- 3 And_aFew.People_RENOUNCEconvention &lt;- 4 자동 완성 기능 (Tab completion) in RStudio 3.5 Variable type of (storage) mode 3.6 Variable - Vectors vector는 R의 기본 데이터 구조입니다. numeric vector, logical vector, character vector 등 저장되는 값의 타입에 따라 크게 세가지로 나눌 수 있습니다. class() 함수를 이용해서 값의 타입을 알아낼 수 있습니다. Combine function인 c()를 활용하여 만들며 값을 순차적으로 붙여갈 수 있습니다. x &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7) class(x) y &lt;- c(&quot;X1&quot;, &quot;Y2&quot;, &quot;X3&quot;, &quot;Y4&quot;) class(y) z &lt;- c(T, F, F, T) class(z) 이 중 특히 numeric 형식의 벡터를 만드는 다양한 편의 함수들이 존재합니다. 1:5 seq(1,5, by=1) seq(0, 100, by=10) seq(0, 100, length.out=11) ?seq rep(5, times=10) rep(1:3, times=4) rep(1:3, each=3) 3.6.1 Excercise 3-1 odds라는 이름의 변수에 1부터 100까지의 홀수만을 저장하시오 (seq() 함수 사용) 3.6.2 Excercise 3-2 1, 2, 3, 4, 5 다섯 숫자에 대해서 두 개의 수를 뽑은 후 더해서 나올 수 있는 모든 수를 구하시오 즉, 1+1, 1+2, 1+3, …, 2+1, 2+2, …, 5+1, 5+2, …, 5+5 의 모든 경우에 대한 결과값을 구함 (rep() 함수 사용) Logical 벡터는 True 또는 False를 원소로 갖는 벡터 입니다. 앞글자가 대분자로 시작하는 것을 기억하시고 T 또는 F와 같이 한 문자로 표현할 수도 있습니다. 특정 조건에 대한 판단 결과를 반환할 경우에도 논리값을 사용합니다. 이 경우 조건을 판단 후 인덱싱 방법으로 해당 값들을 뽑아내기도 합니다. is.na(1) is.numeric(1) is.logical(TRUE) x &lt;- 1:20 x &gt; 13 temp &lt;- x &gt; 13 class(temp) ages &lt;- c(66, 57, 60, 41, 6, 85, 48, 34, 61, 12) ages &lt; 30 which(ages &lt; 30) i &lt;- which(ages &lt; 30) ages[i] any(ages &lt; 30) all(ages &lt; 30) 3.6.3 Excercise 3-3 1부터 100까지의 수를 n이라는 이름의 변수에 저장하고 이 중 짝수만을 뽑아내서 출력하시오 (which()함수 사용) Character(문자형) 벡터의 경우 문자열을 다루는데 자주 쓰이는 paste() 함수의 사용법을 알아두면 편리합니다. paste() 함수는 서로 다른 문자열을 붙이는데 주로 사용됩니다. 참고로 문자열을 나누는 함수는 strsplit() 입니다. paste()에서 붙이는 문자 사이에 들어가는 문자를 지정하는 파라메터는 sep 이고 strsplit()함수에서 자르는 기준이 되는 문자는split 파라메터로 지정해 줍니다 (?split 또는 ?paste 확인). paste(&quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;, sep=&quot;_&quot;) paste(c(&quot;Four&quot;,&quot;The&quot;), c(&quot;Score&quot;,&quot;quick&quot;), c(&quot;and&quot;,&quot;fox&quot;), sep=&quot;_&quot;) paste(&quot;X&quot;, 1:5, sep=&quot;&quot;) paste(c(&quot;X&quot;,&quot;Y&quot;), 1:10, sep=&quot;&quot;) x &lt;- c(&quot;X1&quot;, &quot;Y2&quot;, &quot;X3&quot;, &quot;Y4&quot;, &quot;X5&quot;) paste(x[1], x[2]) paste(x[1], x[2], sep=&quot;&quot;) paste(x, collapse=&quot;_&quot;) strsplit(&quot;XYZ&quot;, split=&quot;&quot;) vector 들은 다음과 같은 builtin 함수들을 사용해서 해당 변수의 attribute를 알아낼 수 있습니다. attribute에는 원소 이름, 타입, 길이 등 vector형 변수가 가질 수 있는 특성을 말합니다. head(precip) class(precip) length(precip) names(precip) test_scores &lt;- c(100, 90, 80) names(test_scores) &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Shirley&quot;) test_scores 인덱싱은 vector 데이터의 일부 데이터를 참조할 때 사용하는 방법입니다. x[1] x[1:3] i &lt;- 1:3 x[i] x[c(1,2,4)] y[3] head(precip) precip[1] precip[2:10] precip[c(1,3,5)] precip[-1] precip[&quot;Seattle Tacoma&quot;] precip[c(&quot;Seattle Tacoma&quot;, &quot;Portland&quot;)] precip[2] &lt;- 10 3.7 Variable - matrix 매트릭스는 2차원 행렬로 같은 형식의 데이터 값 (numberic, character, logical) 으로만 채워진 행렬을 말합니다. 메트릭스를 만드는 방법은 아래와 같으며 nrow 와 ncol 파라메터에 행과 열의 수를 넣고 각 셀에 들어갈 값은 가장 앞에 위치한 data 파라메터에 넣어 줍니다 (?matrix로 파라메터 이름 확인). 메트릭스 인덱싱은 메트릭스 안의 값을 저장하거나 참조할때 (빼올때) 사용하는 방법입니다. 메트릭스 변수이름 바로 뒤에 대괄호를 이용해서 제어를 하며 대괄호 안에 콤마로 구분된 앞쪽은 row, 뒷쪽은 column 인덱스를 나타냅니다. mymat &lt;- matrix(0, nrow=100, ncol=3) # 1 mymat[,1] &lt;- 1:100 # 2 mymat[,2] &lt;- seq(1,200,2) # 3 mymat[,3] &lt;- seq(2,200,2) # 4 매트릭스의 row나 column에 이름이 주어져 있을 경우 이름을 따옴표(\")로 묶은 후 참조가 가능합니다. row나 column의 이름은 rownames() 또는 colnames()로 생성하거나 변경할 수 있습니다. row나 column의 개수는 nrow() 또는 ncol() 함수를 사용합니다. colnames(mymat) colnames(mymat) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) colnames(mymat) colnames(mymat)[2] &lt;- &quot;D&quot; colnames(mymat) rownames(mymat) &lt;- paste(&quot;No&quot;, 1:nrow(mymat), sep=&quot;&quot;) rownames(mymat) 여러 row나 column을 참조할 경우 아래와 같이 combine 함수를 사용하여 묶어줘야 하며 스칼라값을 (임의의 숫자 하나) 더하거나 뺄 경우 vector / matrix 연산을 기본으로 수행합니다. mymat[c(2,3,4,5),2] # 5 mymat-1 # 6 mysub &lt;- mymat[,2] - mymat[,1] #7 sum(mysub) #8 sum(mysub^2) #8 3.8 Variable - data.frame 데이터프레임은 변수의 모임으로 형태는 매트릭스와 같으나 $ 기호를 이용하여 각 구성 변수를 참조할 수 있다는 점이 다릅니다. 즉 컬럼 한 줄을 변수 하나로 보고 여러 변수들을 컬럼 형태로 붙여 놓은 것이 데이터프레임이라고 볼 수 있습니다. 즉, 각 row는 샘플을 나타내고 각 column은 변수를 나타냅니다. 또한 각 변수들이 갖는 값의 개수 (vector 의 길이)는 같아야 합니다. R 기반의 데이터 분석에서는 가장 선호되는 데이터 타입이라고 볼 수 있습니다. ## data.frame ids &lt;- 1:10 ids idnames &lt;- paste(&quot;Name&quot;, ids, sep=&quot;&quot;) idnames students &lt;- data.frame(ids, idnames) students class(students$ids) class(students$idnames) students$idnames students &lt;- data.frame(ids, idnames, stringsAsFactors = F) class(students$idnames) students$idnames students[1,] 데이터프레임에서도 변수 이름을 따옴표(\")로 묶은 후 참조가 가능합니다. ## data frame indexing students$ids students[,1] students[,&quot;ids&quot;] 3.9 Variable - list 리스트는 변수들의 모임이라는 점에서 데이터프레임과 같으나 구성 변수들의 길이가 모두 같아야 하는 데이터프레임과는 달리 다른 길이의 변수를 모아둘 수 있는 점이 다릅니다. 즉, R언어에서 두 변수를 담을 수 있는 데이터 타입은 list와 data frame 두 종류가 있는데 list 변수 타입은 vector 형태의 여러개의 element를 가질 수 있으며 각 vector의 길이가 모두 달라도 됩니다. list의 인덱싱에서 [ ]는 리스트를 반환하고 [[ ]]는 vector element들을 반환합니다. ## list parent_names &lt;- c(&quot;Fred&quot;, &quot;Mary&quot;) number_of_children &lt;- 2 child_ages &lt;- c(4, 7, 9) data.frame(parent_names, number_of_children, child_ages) lst &lt;- list(parent_names, number_of_children, child_ages) lst[1] lst[[1]] class(lst[1]) class(lst[[1]]) lst[[1]][1] lst[[1]][c(1,2)] 3.10 Missing values 특정 값이 “Not available” 이거나 “Missing value” 일 경우 벡터의 해당 원소 자리에 데이터의 이상을 알리기 위해 NA를 사용합니다. 따라서 일반적인 연산에서 NA가 포함되어 있는 경우 데이터의 불완전성을 알리기 위해 연산의 결과는 NA가 됩니다. is.na() 함수는 해당 변수에 NA 값이 있는지를 검사해주는 함수이며 R에는 이 외에도 다음과 같은 특수 값들이 사용되고 있습니다. NA: Not available, The value is missing NULL: a reserved value NaN: Not a number (0/0) Inf: (1/0) hip_cost &lt;- c(10500, 45000, 74100, NA, 83500) sum(hip_cost) sum(hip_cost, na.rm=TRUE) ?sum 3.11 Some useful functions 다음은 벡터형 변수와 같이 쓰이는 유용한 함수들입니다. z &lt;- sample(1:10, 100, T) head(z) sort(z) order(z) table(z) p &lt;- z/sum(z) round(p, digits=1) digits &lt;- as.character(z) n &lt;- as.numeric(digits) d &lt;- as.integer(digits) 3.11.1 Excercise 3-4 이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다. "],
["r-programming-basics-ii.html", "Chapter 4 R programming basics II 4.1 Functions 4.2 Vectorized functions 4.3 if statements 4.4 for, repeat, while 4.5 File read and write 4.6 Excel file read and write", " Chapter 4 R programming basics II 4.1 Functions 함수(Function)는 프로그래밍 과정에서 사용자가 필요로하는 기능을 수행하는 명령어를 말하며 다음과 같은 포멧으로 함수를 구현할 수 있습니다. myfunction.name &lt;- function(para1, para2, ... ){ statements return(object) } 예를 들어 다음과 같은 my_sine 함수를 만들 수 있으며 x는 parameter (매개변수)이고 y는 반환값을 저장하는 지역변수 입니다. my_sine &lt;- function(x){ y &lt;- sin(x) return(y) } 만들어진 함수는 다음과 같이 사용할 수 있습니다. 여기서 함수로 전달되는 값 pi는 argument (전달인자) 라고 합니다. 전달인자는 함수에서 정의된 매개변수의 갯수와 같은 수의 전달인자를 입력해 주어야 합니다. my_sine(pi) Terminology function name: my_sine parameter: x argument: pi return value: y 다음 코드를 보면 전역변수 x, y는 지역변수 x, y와 독립적으로 사용됨을 알 수 있습니다. my_half &lt;- function(x){ y &lt;- x/2 cat(&quot;local variable x:&quot;, x, &quot;\\n&quot;) cat(&quot;local variable y:&quot;, y, &quot;\\n&quot;) return(y) } y &lt;- 100 x &lt;- 20 cat(&quot;Global variable x:&quot;, x, &quot;\\n&quot;) cat(&quot;Global variable y:&quot;, y, &quot;\\n&quot;) my_half(5) log, sin등의 함수들은 Built-in function으로 같은 이름의 함수를 만들지 않도록 주의합니다. x &lt;- pi sin(x) sqrt(x) log(x) log(x, 10) x &lt;- c(10, 20, 30) x + x mean(x) sum(x)/length(x) 4.2 Vectorized functions 초기에 R이 다른 프로그래밍 언어에 비해서 경쟁력을 갖는 이유 중 하나가 바로 이 기능 이였습니다. vector 변수에 들어있는 각 원소들에 대해서 특정 함수나 연산을 적용하고 싶을 경우 전통 방식의 C나 Java등의 언어에서는 원소의 개수만큼 반복문을 돌면서 원하는 작업을 수행 했습니다. 그러나 R의 vectorization 기능은 별도의 반복문 없이 vector 안에 있는 원소들에 대한 함수 실행 또는 연산을 수행할 수 있습니다. x &lt;- c(10, 20, 30) x + x sqrt(x) sin(x) log(x) x-mean(x) length(x) test_scores &lt;- c(Alice = 87, Bob = 72, James= 99) names(test_scores) 4.2.1 Exercise 4-1 다음은 한 다이어트 프로그램의 수행 전 후의 다섯 명의 몸무게이다. 각각을 before 와 after 이름의 변수에 저장 후 몸무게 값의 변화량을 계산하시오. before값들의 평균을 구하시오 (mean() 함수 사용) my_mean 이라는 이름의 함수로 평균을 구하는 코드를 작성 하시오 (빌트인 함수 사용하지 않음) 함수이름: my_mean parameter: x return 값: y (x[1]+x[2]+x[3]+x[4]+x[5])/5 빌트인 함수 sum()과 length()를 이용해 동일한 기능을 하는 함수를 작성하시오 함수이름 my_mean2 sum(), length() 사용 4.2.2 Excercise 4-2 다음 네 학생이 있으며 “John”,“James”,“Sara”, “Lilly” 각 나이는 다음과 같음. 21, 55, 23, 53. ages 라는 변수를 생성하고 각 나이를 저장한 후 who라는 이름의 함수를 만들어서 50살 이상인 사람의 이름을 출력하는 함수를 만드시오. ages라는 변수에 나이 저장, c() 함수 이용, vector 형태 저장 names() 함수 이용해서 각 ages 벡터의 각 요소에 이름 붙이기 which() 함수 사용해서 나이가 50보다 큰 인덱스 찾고 해당 인덱스 값 출력 하기 ages를 메개변수로 받아서 나이가 50보다 큰 인덱스 찾고 해당 인덱스의 값을 반환해 주는 who 함수 만들고 사용 4.3 if statements R에서의 제어문의 사용은 다른 프로그래밍 언어와 거의 유사합니다. 먼저 if 는 다음과 같은 형식으로 사용되며 () 안에 특정 조건 판단을 위한 표현이 들어갑니다. if(condition){ expr_1 }else{ expr_2 } 특히 condition은 하나의 원소에 대한 조건 판단문으로 T 또는 F 값 하나만을 반환하는 문장이어야 합니다. 위 코드는 만약 condition 조건이 True 이면 expr_1를 실행하고 False이면 expr_2를 실행하라는 명령입니다. condition 안에서 사용되는 비교 연산자들은 다음과 같습니다. x &lt;- 2 if(x%%2 == 1){ cat(&quot;Odd&quot;) }else{ cat(&quot;Even&quot;) } x &lt;- 5 if(x &gt; 0 &amp; x &lt; 4){ print(&quot;Positive number less than four&quot;) } if(x &gt; 0) print(&quot;Positive number&quot;) x &lt;- -5 if(x &gt; 0){ print(&quot;Non-negative number&quot;) } else if(x &lt;= 0 &amp; x &gt; -5){ print(&quot;Negative number greater than -5&quot;) } else { print(&quot;Negative number less than -5&quot;) } if(x &gt; 0) print(&quot;Non-negative number&quot;) else print(&quot;Negative number&quot;) 4.3.1 Excercise 4-3 1부터 100까지 수를 x라는 변수에 저장하고 홀수 이거나 10의 배수인 수들을 골라내는 코드를 작성 하시오 (%% 나머지 연산, if문 사용) 4.4 for, repeat, while 4.5 File read and write 텍스트 파일의 경우 아래와 같이 csv 또는 txt 파일로 저장하여 메모장으로 열어 확인할 수 있으며 읽어올 경우 구분자 (sep 파라메터) 나 header를 (header 파라메터) 읽을지 읽지 않을지 등을 옵션으로 지정할 수 있습니다. x &lt;- c(1,2,3,4) y &lt;- c(5,6,7,8) xy&lt;-data.frame(x=x, y=y) write.table(xy, file=&quot;table_write.txt&quot;) write.table(xy, file=&quot;table_write.txt&quot;, quote=F) write.table(xy, file=&quot;table_write.txt&quot;, quote=F, row.names=F) write.table(xy, file=&quot;table_write.txt&quot;, quote=F, row.names=F, sep=&quot;,&quot;) write.table(xy, file=&quot;table_write.csv&quot;, quote=F, row.names=F, sep=&quot;,&quot;) mydata&lt;-read.table(file=&quot;table_write.csv&quot;) mydata&lt;-read.table(file=&quot;table_write.csv&quot;, sep=&quot;,&quot;) mydata&lt;-read.table(file=&quot;table_write.csv&quot;, sep=&quot;,&quot;, header=T) plot(mydata$x, mydata$z) 4.6 Excel file read and write 엑셀파일은 readxl 이라는 R 패키지를 활용하여 읽거나 쓸 수 있습니다. install.packages(&quot;readxl&quot;) 실습 파일은 형광 세포를 배양하여 형광리더기를 이용해 얻어진 실제 데이터이며 Rprog04-fl.xls 에서 다운로드 받을 수 있습니다. read_excel 함수를 이용하여 파일의 내용을 읽어오면 기본 자료형이 tibble 입니다. tibble은 최근 많이 쓰이는 R object로 data.frame과 유사하나 입력값의 type, name, rowname을 임으로 바꿀 수 없다는 점이 다릅니다. tibble에 익숙해지는 것이 좋으나 본 강의에서는 직관적인 진행을 위하여 data.frame으로 전환하여 사용하겠습니다. library(readxl) ## Warning: package &#39;readxl&#39; was built under R version 3.5.3 mydata &lt;- read_excel(&quot;Rprog04-fl.xls&quot;, sheet=2, skip = 6, col_names=F) ## New names: ## * `` -&gt; ...1 ## * `` -&gt; ...2 ## * `` -&gt; ...3 ## * `` -&gt; ...4 ## * `` -&gt; ...5 ## * ... and 7 more problems myod &lt;- as.data.frame(mydata[1:8, ]) mygfp &lt;- as.data.frame(mydata[12:21, ]) class(myod[,1]) class(myod[,2]) 엑셀파일에는 두 종류의 (OD600nm, fluorescence) 데이터가 저장되어 있으며 각각을 위에서 1~8 row 그리고 12~21 row 값들을 모두 myod와 mygfp로 저장했습니다. 그러나 엑셀파일을 보면 첫번째 컬럼에 관측값 외에 다른 정보들에 대한 텍스트가 적혀 있으며 이로 인해 행렬의 가장 첫 컬럼의 데이터 타입이 character가 되고 나머지 컬럼은 numeric으로 자동 전환 되어 data.frame 오브젝트인 mydata에 저장되게 됩니다. 따라서 아래와 같이 문자형을 숫자형으로 전환하여 추후 연산을 진행하게 됩니다. myod[,1] &lt;- as.numeric(myod[,1]) mygfp[,1] &lt;- as.numeric(mygfp[,1]) 수행한 실험의 디자인에 따라서 두 그룹으로 나누고 적절한 이름을 저장합니다. myod_treat &lt;- myod[2:4,] myod_control &lt;- myod[5:7,] sample_names &lt;- paste(&quot;Sample&quot;, c(1:12), sep=&quot;&quot;) replicate_labels &lt;- paste(&quot;Rep&quot;, c(1:3), sep=&quot;&quot;) rownames(myod_treat) &lt;- replicate_labels colnames(myod_treat) &lt;- sample_names rownames(myod_control) &lt;- replicate_labels colnames(myod_control) &lt;- sample_names mean_treat &lt;- colMeans(myod_treat) mean_control &lt;- colMeans(myod_control) 위 예제의 colMean 과 같은 함수는 column 또는 row 단위로 해당하는 모든 값들에 대해 연산을 수행해주는 함수로 colMean은 평균을 계산하는 함수이고 일반적으로는 다음과 같이 apply 함수와 mean 함수를 이용해서 같은 기능을 수행할 수 있습니다. mean 함수 외 임의의 원하는 함수를 만들어 사용할 수 도 있습니다. 참고로 sd는 표준편차를 구해주는 함수 입니다. apply(myod_control, 1, mean) ## Rep1 Rep2 Rep3 ## 0.8069922 0.7706701 0.7873404 apply(myod_control, 2, mean) ## Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 Sample7 Sample8 ## 0.7757480 0.7807732 0.7628736 0.7472908 0.7034527 0.6963549 0.8094640 0.8145531 ## Sample9 Sample10 Sample11 Sample12 ## 0.8301742 0.8390556 0.8447189 0.8555517 apply(myod_control, 2, function(x){ xmean &lt;- mean(x) return(xmean) }) ## Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 Sample7 Sample8 ## 0.7757480 0.7807732 0.7628736 0.7472908 0.7034527 0.6963549 0.8094640 0.8145531 ## Sample9 Sample10 Sample11 Sample12 ## 0.8301742 0.8390556 0.8447189 0.8555517 apply(myod_control, 2, sd) ## Sample1 Sample2 Sample3 Sample4 Sample5 Sample6 ## 0.015981356 0.023394455 0.032168135 0.034528460 0.035805916 0.014999636 ## Sample7 Sample8 Sample9 Sample10 Sample11 Sample12 ## 0.017801936 0.017947840 0.010253370 0.006202754 0.022386592 0.012685731 본 실습에서는 각 그룹의 평균을 비교하는 막대그래프를 그려보겠습니다. plot(mean_treat, type=&quot;h&quot;) barplot(mean_treat, ylim=c(0,1)) mean_test &lt;- data.frame(mean_treat, mean_control) barplot(t(mean_test), ylim=c(0,1), beside=T) 4.6.1 Exercise 4-3 standard deviation 앞서 사용한 sd 함수는 표준편차를 구해주는 기본 제공 함수입니다. 아래는 같은 기능을 하는 함수를 만들어 보는 실습 예제 입니다. ## excercise 3-2 mysd &lt;- function(x){ xmean &lt;- sum(x)/length(x) tmpdif &lt;- x-xmean xvar &lt;- sum(tmpdif^2)/(length(x)-1) xsd &lt;- sqrt(xvar) return(xsd) } x &lt;- sample(1:100, 10) mysd(x) ## [1] 29.07481 sd(x) ## [1] 29.07481 4.6.2 Exercise 4-4 barplot with error bars 앞서 그려본 막대그래프에 에러바를 넣어보는 코드 입니다. 먼저 평균과 표준편차 데이터를 apply 함수를 통해 얻어내고 barplot을 수행합니다. 에러바의 경우 arrows 함수를 사용하는데 사용되는 파라메터의 입력되는 값을 바꿔서 그림을 그려보면 그 의미를 파악하는데 도움이 되겠습니다. ## Exercise 3-3) barplot with sd control_mean &lt;- apply(myod_control, 2, function(x){mean(x)}) control_sd &lt;- apply(myod_control, 2, mysd) barplot(control_mean, width=0.83, space=0.2, col=&quot;gray&quot;, ylim=c(0,1)) arrows(0.5, control_mean[1], 0.5, control_mean[1]+control_sd[1], length=0.1, angle=90) arrows(0.5, control_mean[1], 0.5, control_mean[1]-control_sd[1], length=0.1, angle=90) lab &lt;- paste(&quot;SD:&quot;, round(control_mean[1]+control_sd[1],1)) text(0.5, control_mean[1]+control_sd[1]+0.05, labels = lab) arrows(1.5, control_mean[2], 1.5, control_mean[2]+control_sd[2], length=0.1, angle=90) arrows(1.5, control_mean[2], 1.5, control_mean[2]-control_sd[2], length=0.1, angle=90) lab &lt;- paste(&quot;SD:&quot;, round(control_mean[2]+control_sd[2],1)) text(1.5, control_mean[2]+control_sd[2]+0.05, labels = lab) 그러나 위 12개의 bar 모두에 대해서 arrows 함수를 그리기 보다는 for 문을 이용한 반복 실행을 수행하는 것이 효율적 입니다. for 문의 사용 형식과 반복 횟수 그리고 반복하며 변화되는 값을 갖는 변수에 대한 의미를 파악하고 사용하는 것이 중요합니다. for문의 사용법은 강의노트 를 참고하세요. ## Exercise 3-4) barplot with sd using for barplot(control_mean, width=0.83, space=0.2, col=&quot;gray&quot;, ylim=c(0,1)) for(i in 1:length(control_mean)){ xpos &lt;- 0.5+i-1 arrows(xpos, control_mean[i], xpos, control_mean[i]+control_sd[i], length=0.1, angle=90) arrows(xpos, control_mean[i], xpos, control_mean[i]-control_sd[i], length=0.1, angle=90) lab &lt;- paste(&quot;SD:&quot;, round(control_mean[i]+control_sd[i],1)) text(xpos, control_mean[i]+control_sd[i]+0.05, labels = lab) } 마지막으로 실습 예제 4-5는 엑셀파일 이름을 argument로 받아서 파일 내용을 읽고 데이터를 두 그룹으로 나누어 평균을 계산한 후 plot까지 그려주는 함수를 만드는 실습 예제 입니다. 다음 시간에 이어서 합니다. 이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다. "]
]
